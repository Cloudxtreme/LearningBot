package fr.insarennes.learningbot.controller;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.xml.stream.XMLStreamException;

import kc.micro.Thorn;
import robocode.BattleEndedEvent;
import robocode.BulletHitEvent;
import robocode.ScannedRobotEvent;
import fr.insarennes.learningbot.model.DecisionTree;
import fr.insarennes.learningbot.model.LearnedData;

/**
 * A robot based on an existing one, however this one will improve itself over time,
 * by building and following a decision tree.
 */
public class LearningBot extends Thorn {
//CONSTANTS
	/** The file which contains the decision tree **/
	private static final String TREE_FILE = "learningbot.tree.xml";
	/** The default bullet power **/
	private static final double BULLET_POWER = 12; //FIXME May not be the most appropriate value.
	
//ATTRIBUTES
	/** The decision tree generated by BonzaiBoost (c) **/
	private static DecisionTree tree;
	/** All the data acquired during battle (static so that each LearningBot instance has access to it) **/ 
	private static List<LearnedData> knowledge = new ArrayList<LearnedData>();

//CONSTRUCTOR
	/**
	 * Class constructor
	 */
	public LearningBot() {
		super();
	}

//ACCESSORS
	/**
	 * @return The last saved data, or null if no data
	 */
	public LearnedData getLastData() {
		return (knowledge.size() > 0) ? knowledge.get(knowledge.size()-1) : null;
	}
//MODIFIERS
	
//OTHER METHODS
	/**
	 * This method is launched when a battle starts
	 */
	public void run() {
		loadTree();
		
		super.run();
	}
	
	/**
	 * This method is called when a robot is detected
	 */
	public void onScannedRobot(ScannedRobotEvent e) {
		knowledge.add(new LearnedData(this, e));
		if(tree == null) {
			super.onScannedRobot(e);
		}
		else {
			//Decision for shoot
			if(tree.doWeShoot(this)) {
				fireBullet(BULLET_POWER);
				System.err.println("Proudly fired with BonzaiBoost (c)");
			}
			
			//TODO Decision for movement
		}
	}
	
	public void onBulletHit(BulletHitEvent e) {
		super.onBulletHit(e);
		knowledge.get(knowledge.size()-1).setShootSuccesfull();
	}
	
	public void onBattleEnded(BattleEndedEvent e) {
		//Save data in filesystem
		if(knowledge.size() > 0) {
			LearnedDataWriter ldw = new LearnedDataWriter();
			try {
				ldw.write(knowledge, getDataFile("learningbot.data"), getDataFile("learningbot.names"));
			} catch (IOException e1) {
				e1.printStackTrace();
				System.err.println("Failed to save collected data.");
			}
		} else {
			System.err.println("No data to save.");
		}
		
		super.onBattleEnded(e);
	}
	
	/**
	 * Tries to load tree from XML file
	 */
	private void loadTree() {
		//Load tree if needed
		if(tree == null) {
			DecisionTreeParser dtp = new DecisionTreeParser();
			try {
				tree = dtp.parse(getDataFile(TREE_FILE));
			} catch (FileNotFoundException | XMLStreamException e) {
				e.printStackTrace();
			}
		}
	}
}
